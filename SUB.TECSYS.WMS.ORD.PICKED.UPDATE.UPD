SUBROUTINE SUB.TECSYS.WMS.ORD.PICKED.UPDATE(FILE.DATA,DATA.TYPE,START.MARKER,END.MARKER)

*~* called from: PROGRAM: TECSYS.OUTBOUND.ORD.PICKED.PHANTOM
*********************************************************************
* PARSE AND UPDATE DATA FOR WMS UPDATE.TYPE="SO"
* THIS DOES THE TRANSFORMATION OF DATA AND UPDATES FILES OR CALLS OTHER
* SUBROUTINES TO COMPLETE THE WORK
* 11/02/20 - BACK TO ORIGINAL
* 12/14/20 - ADDED A DIFFERENT PROGRAM TO ADDRESS ADDING TO THE ORDER
*********************************************************************
CALL IQ.FILES
COMMON FILES(200)

AM = CHAR(254)
VM = CHAR(253)
SVM = CHAR(252)

* PICK FILE OPENS
OPEN "ORDER" TO F.ORDER ELSE ERROR<-1> = "ORDER not located"
OPEN "SHIPPING" TO F.SHIPPING ELSE ERROR<-1> = "SHIPPING not located"
OPEN "STOCK-TRANSFER" TO F.STOCK.TRANSFER ELSE ERROR<-1> = "STOCK-TRANSFER not located"
OPEN "STOCK-RECEIVED" TO F.STOCK.RECEIVED ELSE ERROR<-1> = "STOCK-RECEIVED not located"
OPEN "TRANSFERS" TO F.TRANSFERS ELSE ERROR<-1> = "TRANSFERS not located"
OPEN "RECEIVED-POS" TO F.RECEIVED.POS ELSE DEBUG
OPEN "PO" TO F.PO ELSE DEBUG
OPEN "BRANCH" TO F.BRANCH ELSE DEBUG
OPEN "INVENTORY" TO F.INVENTORY ELSE DEBUG
OPEN "PRODUCT-MASTER" TO F.PRODUCT.MASTER ELSE DEBUG

* GLOBAL VARIABLES
PICK.DATE = DATE()
PICK.TIME = TIME()

*============================
* auto complete qty-shipped *
*============================
SPECIAL.PART.LIST = "BUSINESSPR"
SPECIAL.PART.LIST<-1> = "DONATIONPR"
SPECIAL.PART.LIST<-1> = "BILLING ADJ"
SPECIAL.PART.LIST<-1> = "BUSINESSMI"

* XML LINE TAG VARIABLES *
HEADER.TAG = "WmsOmFPickResultsTs"
HEADER.LOOP = "WmsOmFPickResultsTs"
LINEOUT.TAG = "WmsOdFPickResultsTs.Line."
LINEOUT.LOOP = "WmsOdFPickResultsTs.Line"

************************************
* START OF PROCESSING OF THE ORDER *
************************************
* ORDER DATA ARRAY VARIABLES *
OREC=''     ;   * USED TO READ IN THE ORIGINAL ORDER DATA FROM THE PICK FILE
DATA.UPDATE='' ; * THIS IS UPDATED WITH THE WMS INFORMATION AS IT IS PROCESSED BEFORE IT IS WRITTEN TO THE ORDER
UPDATE.FILE=''  ; * USED TO IDENTIFY WHERE ORDER DATA CAME FROM
**************************************
* INITIALIZE AND LOAD DATA FROM PICK *
**************************************
*** FIND THE ORDER NUMBER ***
LOCATE "Order" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
    IF POS > START.MARKER AND POS < END.MARKER THEN
        ORD.NUM=FILE.DATA<3,POS>
    END ELSE
        FIND.TAG = "Order"
        TAG.DATA = ''
        CALL SUB.TECSYS.LOC.TAG.DATA(FILE.DATA,FIND.TAG,TAG.DATA,START.MARKER,END.MARKER,KEY)

        IF TAG.DATA # '' AND TAG.DATA # '0' THEN
            TAG.DATA = TAG.DATA
        END ELSE
            TAG.DATA = "ORDER# not Found"
        END

        EMAIL.LIST = ''
        CUSTOM.FROM = ''
        CUSTOM.SUBJECT='ORDER NUMBER NOT FOUND WITHIN BOUNDS ON ORDER# ': TAG.DATA
        CUSTOM.BODY = ''
        
        CALL SUB.TECSYS.EMAIL.DATA(FILE.DATA,EMAIL.LIST,CUSTOM.FROM,CUSTOM.SUBJECT,CUSTOM.BODY,START.MARKER,END.MARKER)
        RELEASE
        RETURN 
    END
END ELSE
    * IF WE CANT' FIND AN ORDER NUMBER THEN WE CAN'T LOAD ORDER DATA!! WHAT SHOULD WE DO HERE, SAVE THE DATA SOMEWHERE?

        EMAIL.LIST = ''
        CUSTOM.FROM = ''
        CUSTOM.SUBJECT='NO <Order> TAG FOUND IN UPDATE '
        CUSTOM.BODY = ''
        
        CALL SUB.TECSYS.EMAIL.DATA(FILE.DATA,EMAIL.LIST,CUSTOM.FROM,CUSTOM.SUBJECT,CUSTOM.BODY,START.MARKER,END.MARKER)
END
******************************
* READ THE ORDER RECORD
******************************
    READU OREC FROM F.SHIPPING,ORD.NUM THEN
       DATA.UPDATE=OREC    ;   * THIS IS TO PRE-POPULATE OUR UPDATE ARRAY WITH ORDER DATA THIS MAY NOT BE NEEDED IF WE DONT' WANT TO DO IT
       UPDATE.FILE="SHIPPING"
    END ELSE
    READU OREC FROM F.ORDER,ORD.NUM THEN
       DATA.UPDATE=OREC    ;   * THIS IS TO PRE-POPULATE OUR UPDATE ARRAY WITH ORDER DATA THIS MAY NOT BE NEEDED IF WE DONT' WANT TO DO IT
       UPDATE.FILE="ORDER"
    END ELSE
       RELEASE ; RETURN ; *WE'LL ADD TRANSFERS LATER
    END
    END
*************************************************
* THIS IS WHERE WE LOOK UP AND ASSIGN THE DATA  *
* DON'T FORGET THERE IS NO TAG FOR THIS SECTION *
*************************************************
* THESE VARIABLES ARE THE PIECES OF INFORMATION WE ARE GOING TO LOCATE IN THE UPDATE *

**////////////// NEW TAGS 10/20/20
HEADER.TAG = "WmsOmFPickResultsTs"
BR.NO=''           ; *   <Warehouse>BRANCH1</Warehouse>
TYPE=''            ; *   <OrderType>XF</OrderType>    - SO or XF  (ORTV ?)
USER.ID=''         ; *   <ModifiedBy>robp</ModifiedBy>
DATE.TIME=''      ;  * <CreationDateAndTime>  =  2020-03-05 11:50:49  <--  need to change the '-' to a '/'  <7,4 and 5>
SHIP.VIA=''        ; *   <CarrierService>CN</CarrierService> 
    
LINES.TAG = "WmsOdFPickResultsTs"
PART.NO=''        ;  *         <Item>IPND000289</Item>
QTY.PICKED=''     ;  *         <CompletedQuantity>2.000</CompletedQuantity>
KIT.TYPE=''       ;  *         <KitLineType>1</KitLineType> "" Not a Kit;  '1' = Kit Part#;  '2' = Component
KIT.LINE=''       ;  *         <KitOrderGroup>2</KitOrderGroup> If a Kit then what Line # is it associated with
ORD.STAT='PICKED'                 


    LOCATE "Warehouse" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            BRANCH=FILE.DATA<3,POS>
        END ELSE
            BRANCH=1
        END
    END ELSE
        * IF WE CANT' FIND THE BRANCH NUMBER WE ASSUME IT IS 1
        BRANCH=1
    END

    IF BRANCH = "BRANCH1" THEN BRANCH = "1"
    
   LOCATE "OrderType" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
       IF POS > START.MARKER AND POS < END.MARKER THEN
          TYPE = FILE.DATA<3,POS>
       END ELSE 
          TYPE = "SO"
       END
    END ELSE
       TYPE = 'XF'
    END
    
   LOCATE "CarrierService" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
       IF POS > START.MARKER AND POS < END.MARKER THEN
          SHIP.VIA = FILE.DATA<3,POS>
       END ELSE 
          SHIP.VIA = ""
       END
    END    

   LOCATE "ModifiedBy" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
      IF POS > START.MARKER AND POS < END.MARKER THEN
         USER.ID=FILE.DATA<3,POS>
      END ELSE
         USER.ID="WSYS"
      END
   END
      
   LOCATE "CreationDateAndTime" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
      IF POS > START.MARKER AND POS < END.MARKER THEN   
         DATE.TIME=FILE.DATA<3,POS>
      END ELSE
         DATE.TIME = OCONV(DATE(),"d2/"):" ":OCONV(TIME(),"mts") ;* 24h time
      END
   END

      CONVERT '-' TO '/' IN DATE.TIME

******************************************************
* LOCATING OF ALL HEADER DATA IS COMPLETE            *
* WE DO ADDITIONAL TRANSFORMATION AND VERIFICATION  *
* OF DATA LATER ON AFTER WE LOCATE THE LINE DATA     *
******************************************************
 LINE.START=START.MARKER
 LINE.NEXT=''
 LINES.COMPLETE=0

NEXT.LINE:

* LINE LEVEL VARIABLES
PART.NO=''
QTY.PICKED=''
PICKED.FLAG=''
BC=''
LINE=''
KIT.TYPE=''

ORD.TYPE = ""

* SET LINE DELIMETERS *
    LOCATE LINEOUT.LOOP IN FILE.DATA<1>,LINE.START SETTING LINE.START THEN
        LOCATE LINEOUT.LOOP IN FILE.DATA<1>,LINE.START+1 SETTING LINE.NEXT THEN
            IF LINE.NEXT < END.MARKER AND LINE.NEXT > LINE.START THEN
                PRINT "MORE LINES TO COME"      ;  * AFTER 100% COMPLETE WE WON'T BE PRINTING TO THE SCREEN
            END ELSE
                LINES.COMPLETE=1
            END
        END ELSE
            LINES.COMPLETE=1
        END
    END ELSE
        * WHAT DO WE DO IF CAN'T FIND ANY LINES IN THE ORDER?
    END

*    LOCATE LINEOUT.TAG:"OrderLine" IN FILE.DATA<1>,LINE.START SETTING POS THEN
    LOCATE LINEOUT.TAG:"HostOrderLine" IN FILE.DATA<1>,LINE.START SETTING POS THEN
       IF POS > LINE.START AND POS < LINE.NEXT THEN
           OVAL=FILE.DATA<3,POS>
       END
    END ELSE
       GOTO SKIP.LINE
    END
    LOCATE LINEOUT.TAG:"Item" IN FILE.DATA<1>,LINE.START SETTING POS THEN
       IF POS > LINE.START AND POS < LINE.NEXT THEN
          PART.NO=FILE.DATA<3,POS> 
       END
    END ELSE
       PART.NO = ""
    END

    QTY.PICKED=0
    LOCATE LINEOUT.TAG:"CompletedQuantity" IN FILE.DATA<1>,LINE.START SETTING POS THEN
        IF POS > LINE.START AND POS < LINE.NEXT THEN
            QTY.PICKED=FILE.DATA<3,POS> 
        END      
    END
    IF NUM(QTY.PICKED) THEN NULL ELSE QTY.PICKED=0
    QTY.PICKED=INT(QTY.PICKED)
    IF QTY.PICKED+0=0 THEN PICKED.FLAG='' ELSE PICKED.FLAG='Y'

    KIT.TYPE=''
    LOCATE LINEOUT.TAG:"KitLineType" IN FILE.DATA<1>,LINE.START SETTING POS THEN
        IF POS > LINE.START AND POS < LINE.NEXT THEN
            KIT.TYPE=FILE.DATA<3,POS> 
        END
    END
    IF KIT.TYPE = "2" THEN  ;  * 2 = COMPONENT ITEM OF THE KIT
       LOCATE LINEOUT.TAG:"KitOrderGroup" IN FILE.DATA<1>,LINE.START SETTING POS THEN
          IF POS > LINE.START AND POS < LINE.NEXT THEN
             OVAL=FILE.DATA<3,POS> 
          END
       END
    END
    
*~*~*~*
**PRINT TO SCREEN DURING TROUBLESHOOTING/TESTING
**~*~*
*~* below is data pulled from the feed *~*

IF ORD.NUM # "" THEN 
   PRINT "SALES ORDER: ":ORD.NUM
   PRINT "     ITEM: ":PART.NO:" QTY DUE: ":OREC<5,OVAL>:" QTY PICKED: ":QTY.PICKED:'  OVAL: ':OVAL
END
**************************************
* LOCATING OF ALL DATA IS COMPLETE   *
* DATA TRANSFORMATION CAN NOW HAPPEN *
**************************************

    IF USER.ID = "wms_erp_si_es" OR USER.ID = "system" THEN
       USER.ID = "WSYS"
    END ELSE
       IF USER.ID = "" THEN USER.ID="WMS"
    END
    
    ORD.STAT = "PICKED"
    QTY.PICK=""
    READ PROD.REC FROM F.PRODUCT.MASTER, PART.NO ELSE PROD.REC = ""
    READ INVENTORY.REC FROM F.INVENTORY, PART.NO:"*":BRANCH ELSE INVENTORY.REC = ""

    BAD.PART=''
    IF PART.NO=OREC<2,OVAL> THEN NULL ELSE
       IF KIT.TYPE=2 THEN
          LOCATE(PART.NO,OREC,263,OVAL;JUNK) ELSE BAD.PART=1
       END ELSE
          BAD.PART=1
       END
    END
    IF BAD.PART=1 THEN
       PRINT "ORIGINAL PART: ":OREC<2,OVAL>:" DOESN'T MATCH WMS PART: ":PART.NO
PRINT STR('-',70)
       GOTO SKIP.LINE
    END
PRINT STR('-',70)
***********************************************************************
* WE HAVE A SINGLE LINES WORTH OF DATA TRANSFORMED THE WAY WE WANT IT *
* NOW WE DECIDE WHAT IS IMPORTANT/NEEDED FOR UPDATE AND LOAD IT       *
* INTO THE DATA.UPDATE ARRAY PER THE LINE NUMBER                      *
***********************************************************************
*~* 10/23/20 - updating Picking and not Shipping results!!
    IF TYPE = "SO" THEN
       IF KIT.TYPE=2 THEN
          LOCATE(PART.NO,DATA.UPDATE,263,OVAL;KVAL) THEN
             DATA.UPDATE<266,OVAL,KVAL>=QTY.PICKED
          END
          PNO=DATA.UPDATE<2,OVAL>
          READ PREC FROM FILES(20),PNO ELSE PREC=''
          MAX.QTY=DATA.UPDATE<5,OVAL>
          FOR KK=1 TO DCOUNT(PREC<13>,CHAR(253))
             KNO=PREC<13,KK>
             KQTY=PREC<15,KK>
             KQTY=OCONV(KQTY,'MD4')
             LOCATE(KNO,DATA.UPDATE,263,OVAL;KVAL) ELSE NULL
             PQTY=DATA.UPDATE<266,OVAL,KVAL>
             PQTY=PQTY/KQTY ; PQTY=INT(PQTY)
             IF PQTY < MAX.QTY THEN MAX.QTY=PQTY
          NEXT KK
          DATA.UPDATE<34,OVAL>=MAX.QTY
       END ELSE
          DATA.UPDATE<266,OVAL>=QTY.PICKED   
          DATA.UPDATE<34,OVAL>=QTY.PICKED
       END
       DATA.UPDATE<105,OVAL>=DATA.UPDATE<34,OVAL>
       DATA.UPDATE<164,OVAL>=DATA.UPDATE<34,OVAL>
       IF DATA.UPDATE<34,OVAL>+0 # 0 THEN DATA.UPDATE<250,OVAL>='Y'
       BC='C'
       IF DATA.UPDATE<34,OVAL> < DATA.UPDATE<5,OVAL> THEN BC='B'
       IF DATA.UPDATE<27>='N' THEN BC='C'
       LOCATE(DATA.UPDATE<2,OVAL>,SPECIAL.PART.LIST;JUNK) THEN BC='C'
       DATA.UPDATE<35,OVAL>=BC
*************************************** jemi 02/25/21 ************ tied to po  UPDATED 03/04/21
       TIED2PO = ""
       IF DATA.UPDATE<176>#'' THEN TIED2PO = "Y"
*********    
*!* 12/18/20 *!* IF ORDER CHANGED THEN WRITE TO <171>
       DIFF = ""
       IF DATA.UPDATE<34,OVAL> # DATA.UPDATE<5,OVAL> THEN DIFF = "Y"
         IF DIFF = "Y" THEN
            DATA.UPDATE<171> = DIFF
         END 
*~*      
    END

IF TYPE = "XF" THEN
   DATA.UPDATE<31,OVAL>=QTY.PICKED
   DATA.UPDATE<42,OVAL>="PICKED"
END
***************************************************
* CHECK TO SEE IF ALL LINES HAVE BEEN PROCESSED   *
***************************************************
SKIP.LINE:
    IF LINES.COMPLETE # '1' THEN
        LINE.START=LINE.START+1
        GOTO NEXT.LINE       
    END

IF TYPE = "XF" THEN GOTO STKTRNS
*********************************
* UPDATE TRANSFER DATA
*********************************
*************
STKTRNS:

*****************************************************************
* WE HAVE THE DATA TRANSFORMED THE WAY WE WANT IT               *
* NOW WE DECIDE WHAT IS IMPORTANT/NEEDED FOR UPDATE AND LOAD IT *
* INTO THE DATA.UPDATE ARRAY                                    *
*****************************************************************

IF UPDATE.FILE # '' OR UPDATE.FILE # '0' THEN
    IF UPDATE.FILE="ORDER" OR UPDATE.FILE="SHIPPING" THEN
        DATA.UPDATE<162> = ORD.STAT
        DATA.UPDATE<165> = USER.ID
        DATA.UPDATE<166> = DATE()   ;  *  Picked Date
    END
   
*   IF UPDATE.FILE="DELETED-ORDERS" THEN <---  THEN WHAT!?  - SEND AN EMAIL?

    IF UPDATE.FILE="TRANSFERS" OR UPDATE.FILE="STOCK-TRANSFER" THEN
        DATA.UPDATE<67> = ORD.STAT 
    END
END ELSE

    RELEASE
    RETURN
END

*************************************************************
* ALL ORDER DATA HAS BEEN PROCESSED AND IS READY FOR UPDATE *
*************************************************************
* THIS IS WHERE WE UPDATE THE TIMESTAMP DATA ARRAY          *
*************************************************************
TS.MSG=''           ;   * THIS IS UPDATED AND PASSED TO THE SUBROUTINE
TS.KEY=''

IF UPDATE.FILE # '' OR UPDATE.FILE # '0' THEN
    IF UPDATE.FILE="ORDER" OR UPDATE.FILE="SHIPPING" THEN
        TS.KEY=ORD.NUM
        TS.MSG<1>="WMS PICKING RESULTS"
        TS.MSG<2>="ORDER PICKED"
        TS.MSG<5>="SO"
      CALL WMS.TIMESTAMP.UPDATE(TS.MSG, TS.KEY, "WMS", USER.ID, error)
    END

    IF UPDATE.FILE="TRANSFERS" OR UPDATE.FILE="STOCK-TRANSFER" THEN
        TS.KEY=ORD.NUM:"*ST"
        TS.MSG<1>="PICK UPDATE"
        TS.MSG<2>="PICKED: ":QTY.PICKED:"-":PART.NO
        TS.MSG<5>="ST"
      CALL WMS.TIMESTAMP.UPDATE(TS.MSG, TS.KEY, "WMS", USER.ID, error)
    END
END ELSE

    RELEASE
END

*~* COMMENTING OUT AND USING CARRIERSERVICE TAG 01/21/21 - jemi
*IF TYPE = "SO" THEN
*   SHIP.VIA    =  OREC<21>
*END
**************************************************************************
* THIS IS WHERE WE CALL ALL UPDATE PROGRAMS FOR ANY WORK TO BE COMPLETED *
* WRITE THE DATA TO THE ORDER AND TO THE TIMESTAMP, ETC ETC              *
**************************************************************************

* SAFETY NET OF CONSISTENCY TO LOAD OUR UPDATED INFORMATION INTO THE ORIGINAL ORDER BEFORE WE WRITE IT
OREC=DATA.UPDATE

BEGIN CASE

    CASE UPDATE.FILE="ORDER"
        WRITE OREC ON F.ORDER,ORD.NUM                  ;       * UPDATES THE ORDER FILE

    CASE UPDATE.FILE="SHIPPING"
        WRITE OREC ON F.SHIPPING,ORD.NUM                  ;       * UPDATES THE SHIPPING FILE
        WRITE OREC ON F.ORDER,ORD.NUM                  ;       * UPDATES THE ORDER FILE

    CASE UPDATE.FILE="TRANSFERS"
        WRITE ST.REC ON F.TRANSFERS,ORD.NUM                       ;       * UPDATES THE TRANSFERS FILE

    CASE UPDATE.FILE="STOCK-RECEIVED"
        WRITE ST.REC ON F.STOCK.RECEIVED,ORD.NUM                   ;       * UPDATES THE STOCK-TRANSFER FILE

    CASE UPDATE.FILE="STOCK-TRANSFER"
        WRITE ST.REC ON F.STOCK.TRANSFER,ORD.NUM                   ;       * UPDATES THE STOCK-TRANSFER FILE

    CASE 1                              ;           * THIS IS A CATCH ALL CASE IF NOTHING ELSE MATCHES

END CASE

IF TYPE = "SO" THEN
*~* UPDATE ORDER TOTAL
   CALL OE.SR.TOT.ORDER ( ORD.NUM, OREC )

*~* 12/31/20 *~* IF TH, OTTH, or WWTH SO - we're going to update the Inventory here at PICKING - otherwise it updates with the SHIPPING RESULTS
*~* UPDATE INVENTORY
*IF FILES(95) = "WSYS" THEN DEBUG

********At cutover when processing the WC and TH Orders we don't want to updated Inventory**********

   IF SHIP.VIA = "TH" OR SHIP.VIA = "OTTH" OR SHIP.VIA = "WWTH" AND OREC<176> # "SENT" THEN
      CALL SUB.TECSYS.INV.QOH.UPDATE (ORD.NUM, "SO")
   END

END

*~* ZERO MESSAGES
IF TYPE = "SO" THEN MODE = "ZS"
IF TYPE = "XF" THEN MODE = "ST"
   CALL DADR.ORDER.SHORT.PALM.SR (OREC, ORD.NUM, MODE, USER.ID)

*~* IF A TH ORDER, AFTER RECEIVING THE PICKING RESULTS, LETS SEE IF WE CAN AUTO-CREATE A BO - 11/05/20 -jemi
      READ PROMPT.REC FROM FILES(3),"OE" ELSE PROMPT.REC = ""
      READ PS.REC FROM FILES(3),"PS" ELSE PS.REC = ""

*///////////////////////////////  turned off 03/04/21 //////////////////////**
*IF SHIP.VIA = "TH" OR SHIP.VIA = "OTTH" OR SHIP.VIA = "WWTH" THEN
*   CALL SUB.TH.BO.GEN.2 ( ORD.NUM , PROMPT.REC , OREC , PS.REC )
*END
*//////////////////////////////////////////////////////////////////////////

IF FILES(95) = "JEMI" THEN DEBUG
*************************************** jemi 02/25/21 ************ tied to po 
*       CREATE.BO = ""
*       IF DATA.UPDATE<11,OVAL> # "" THEN TIED2PO = "Y"   
*       IF TIED2PO = "Y" AND BC = "B" THEN CREATE.BO = "Y"
*IF FILES(95) = "WSYS" THEN DEBUG
**************************************   
IF TIED2PO = "Y"  THEN  
   CALL SUB.TH.BO.GEN.2 ( ORD.NUM , PROMPT.REC , OREC , PS.REC )
END


*~* 12/18/20 - WILL MOST LIKELY MOVE THIS TO SHIPPING RESULTS PROCESSING
*~* IF ORDER CHANGED <171>, IF PRICE IS PRINTED ON PACK <28> AND IF COD <25> THEN PRINT A PACK LIST
ERROR = ''

***********03/01/21  - NOT PRINTING A PACKLIST HERE!!

*IF OREC<171> = "Y" AND OREC<28> = "Y" AND OREC<25> = "ST03" THEN
*   PTR.NO = ''
*   IF SHIP.VIA = "PCS" THEN PTR.NO = "300"
*   IF SHIP.VIA = "HCS" THEN PTR.NO = "300"
*   IF SHIP.VIA = "WCS" THEN PTR.NO = "300"
*   IF SHIP.VIA = "SCS" THEN PTR.NO = "300"
*END

PICKLIST:
   
INCLUDE MISUS GVAR
ATT.REC = ''
*IF SHIP.VIA = "PCS" OR SHIP.VIA = "HCS" OR SHIP.VIA = "WCS" THEN
*IF SHIP.VIA = "WCS" THEN
*    PRINT 'PRINT PACKING LIST - ORDER#: ':ORD.NUM
*    CALL CREATE.PACK.ATT.PS.SIG (ORD.NUM,ATT.REC)    
*   IF PTR.NO = "" THEN PTR.NO = '300'
*   IF PTR.NO = "" THEN GOTO 999
  
*   EXECUTE "SP-ASSIGN F":PTR.NO
*   PRINTER ON
*   NO.ATTR = DCOUNT(ATT.REC,CHAR(254))
*   FOR I = 1 TO NO.ATTR
*       PRINT ATT.REC<I>
*   NEXT I
*   PRINTER CLOSE ; PRINTER OFF
*   RETURN
*END

999
*~*
RELEASE
SLEEP 2
RETURN