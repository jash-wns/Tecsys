SUBROUTINE SUB.TECSYS.INV.STAT.DISASSOCIATE.UPDATE(FILE.DATA,UPDATE.TYPE,START.MARKER,END.MARKER,C.KEY)
*********************************************************************
*
* PARSE INCOMING DATA FROM TECSYS
*                                                                   
*********************************************************************
CALL IQ.FILES
COMMON FILES(200)

* PICK FILE OPENS
OPEN "INVENTORY" TO F.INVENTORY ELSE DEBUG
OPEN "PRODUCT-MASTER" TO F.PRODUCT.MASTER ELSE DEBUG
OPEN "PRODUCT-CATEGORY" TO F.PRODUCT.CATEGORY ELSE DEBUG
OPEN "PROD-HISTORY" TO F.PROD.HISTORY ELSE DEBUG
OPEN "PROD-HISTORY-PART" TO F.PROD.HISTORY.PART ELSE DEBUG
OPEN "COMPANY" TO F.COMPANY ELSE DEBUG
OPEN "AR-GL" TO F.AR.GL ELSE DEBUG

OPEN "ORDER" TO F.ORD ELSE ERROR = "Unable to open ORDER file!"
OPEN "STOCK-TRANSFER" TO F.XFER ELSE ERROR = "Unable to open STOCK-TRANSFER file!"
OPEN "PO" TO F.PO ELSE ERROR = "Unable to open PO file!"

* GLOBAL VARIABLES AND CONSTANTS
REC.DATE = DATE()
REC.TIME = TIME()
CUR.MONTH = OCONV(REC.DATE,"D2/")      ;*  -  Used for update to PH<18>
MMYY = CUR.MONTH[1,2]:CUR.MONTH[7,2]      ;*   --  Used for key when writing to PHP
MONTH.NO = CUR.MONTH[1,2]
KEY = C.KEY

SPECIAL.PART.LIST=''
SPECIAL.PART.LIST<1> = "BUSINESSPR"
SPECIAL.PART.LIST<2> = "DONATIONPR"
SPECIAL.PART.LIST<3> = "BILLING ADJ"
SPECIAL.PART.LIST<4> = "BUSINESSMI"
SPECIAL.PART.LIST<4> = "PKGCORRECT"

************************************
* START OF PROCESSING OF THE ORDER *
************************************

* ORDER DATA ARRAY VARIABLES *
INV.REC=''     ;   * USED TO READ IN THE ORIGINAL ITEM DATA FROM THE INVENTORY FILE
OREC=''        ;   * UPDATE THE ORDER
DATA.UPDATE='' ; * THIS IS UPDATED WITH THE WMS INFORMATION AS IT IS PROCESSED
ITEM.ID=''
PHP.REC=''
BRANCH='1'


**************************************
* INITIALIZE AND LOAD DATA FROM PICK *
**************************************
LOCATE "Item" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
    IF POS > START.MARKER AND POS < END.MARKER THEN
        IF FILE.DATA<3,POS> # '' THEN
            ITEM.ID=FILE.DATA<3,POS>
        END ELSE
            FIND.TAG = "OutboundOrder":AM:"InboundOrder"
            TAG.DATA = ''
            EMAIL.LIST = 'jshelhamer@goblueteam.com'
            CALL SUB.TECSYS.LOC.TAG.DATA(FILE.DATA,FIND.TAG,TAG.DATA,START.MARKER,END.MARKER,KEY)
                IF TAG.DATA<1> # '' THEN
                    TAG.DATA = TAG.DATA<1>
                END ELSE
                    TAG.DATA = TAG.DATA<2>
                END
            CUSTOM.SUBJECT='NO ITEM DATA FOUND IN ':KEY:' ORDER#: ':TAG.DATA
            DEBUG
            CALL SUB.TECSYS.EMAIL.DATA(FILE.DATA,EMAIL.LIST,'',CUSTOM.SUBJECT,START.MARKER,END.MARKER)
        END
    END ELSE
        ITEM.ID="PART NUMBER NOT FOUND"
        FIND.TAG = "Item"
        TAG.DATA = ''
        *SUB.TECSYS.LOC.TAG.DATA(FILE.DATA,FIND.TAG,TAG.DATA,START.MARKER,END.MARKER)
        CUSTOM.SUBJECT='NO REASON TAG FOUND IN ':KEY:' TRYING TO UPDATE PART#: ': TAG.DATA
        *SUB.TECSYS.EMAIL.DATA(FILE.DATA,EMAIL.LIST,CUSTOM.FROM,CUSTOM.SUBJECT,START.MARKER,END.MARKER)
        RELEASE
        RETURN
    END
END ELSE
    * IF WE CANT' FIND AN ITEM TAG THEN WE CAN'T LOAD PART DATA!! WHAT SHOULD WE DO HERE, SEND AN EMAIL?
    EMAIL.LIST = 'jshelhamer@goblueteam.com'
    CUSTOM.SUBJECT='NO <ITEM> TAG FOUND IN ':KEY
    CALL SUB.TECSYS.EMAIL.DATA(FILE.DATA,EMAIL.LIST,'',CUSTOM.SUBJECT,START.MARKER,END.MARKER)
    RELEASE
    RETURN
END

LOCATE ITEM.ID IN SPECIAL.PART.LIST SETTING JUNK THEN 
        EMAIL.LIST='JASH@WNS1.COM'
        FIND.TAG = "Item"
        TAG.DATA = ''
        *SUB.TECSYS.LOC.TAG.DATA(FILE.DATA,FIND.TAG,TAG.DATA,START.MARKER,END.MARKER)
        CUSTOM.SUBJECT='NO REASON TAG FOUND IN ':KEY:' TRYING TO UPDATE PART#: ': TAG.DATA
        *SUB.TECSYS.EMAIL.DATA(FILE.DATA,EMAIL.LIST,CUSTOM.FROM,CUSTOM.SUBJECT,START.MARKER,END.MARKER)
    RELEASE
    RETURN
END ELSE
    READU INV.REC FROM F.INVENTORY,ITEM.ID:"*":BRANCH THEN    ;  * LOCK AND READ IN ORIGINAL ITEM DATA
        COST = INV.REC<7>
    END ELSE
        FIND.TAG = "Item"
        TAG.DATA = ''
        *SUB.TECSYS.LOC.TAG.DATA(FILE.DATA,FIND.TAG,TAG.DATA,START.MARKER,END.MARKER)
        CUSTOM.SUBJECT='NO REASON TAG FOUND IN ':KEY:' TRYING TO UPDATE PART#: ': TAG.DATA
        *SUB.TECSYS.EMAIL.DATA(FILE.DATA,EMAIL.LIST,CUSTOM.FROM,CUSTOM.SUBJECT,START.MARKER,END.MARKER)
        RELEASE
        RETURN
    END
END

* REASON CODES:
      *RV = RETURN TO VENDOR
      *DISASSOCIATE_ORDER  
      *DMG=DAMAGED
*******************************************************
* THIS IS WHERE WE LOOK UP AND ASSIGN THE DATA FIELDS *
*******************************************************
* THESE VARIABLES ARE THE PIECES OF INFORMATION WE ARE GOING TO LOCATE IN THE UPDATE *
TASK=UPDATE.TYPE<1,1>
REASON=UPDATE.TYPE<1,2>
PKG.CODE=''
TAG=''
HOLD.CODE=''
DAMAGED=''
ORIG.QTY=''
TRANS.QTY=''
NEW.QTY=''
USER.ID=''
LOT=''
OUT.ORD.NUM=''
OUT.ORD.TYPE=''
OUT.ORD.LINE=''
ORD.STAT=''
IN.ORD.NUM=''
IN.ORD.TYPE=''
IN.ORD.LINE=''
ORD.LINE.COMP=''
CONTAINER=''
LOCATION=''
RECV.LOC=''
SER.NUM=''
ITEM.EXP=''
PICKED=''
ACCOUNT.NUM=699

*~* reason not needed below since everything currently coming into this sub is for DisAssociate

    LOCATE "Warehouse" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            BRANCH=FILE.DATA<3,POS>
        END ELSE
            BRANCH=1
        END
    END ELSE
        BRANCH=1
    END

    LOCATE "PackageCode" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            PKG.CODE=FILE.DATA<3,POS>
        END
    END ELSE
        PKG.CODE="PACKAGE CODE NOT FOUND"
    END

    LOCATE "Tag" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            TAG=FILE.DATA<3,POS>
        END
    END ELSE
        TAG="TAG NOT FOUND"
    END

    LOCATE "HoldCode" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            HOLD.CODE=FILE.DATA<3,POS>
        END
    END ELSE
        HOLD.CODE="HOLD CODE NOT FOUND"
    END

    LOCATE "AffectDamaged" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            DAMAGED=FILE.DATA<3,POS>
        END
    END ELSE
        DAMAGED="DAMAGED NOT FOUND"
    END

*~* 01/20/21 All of the Quantity Values are the same! :-(

    LOCATE "OriginalQuantity" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            ORIG.QTY=FILE.DATA<3,POS>
        END
    END ELSE
        ORIG.QTY="ORIGINAL QTY NOT FOUND"
    END

    LOCATE "Quantity" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            TRANS.QTY=FILE.DATA<3,POS>
        END
    END ELSE
        TRANS.QTY="TRANSACTION QTY NOT FOUND"
    END

    LOCATE "QuantityProcessed" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            NEW.QTY=FILE.DATA<3,POS>
        END
    END ELSE
        NEW.QTY="NEW QTY NOT FOUND"
    END

    LOCATE "UserName" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            USER.ID=FILE.DATA<3,POS>
        END ELSE
            USER.ID="Tecsys User"
        END
    END ELSE
        USER.ID="USERNAME NOT FOUND"
    END

    LOCATE "Lot" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            LOT=FILE.DATA<3,POS>
        END
    END ELSE
        LOT="LOT NOT FOUND"
    END

    LOCATE "OutboundOrder" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            OUT.ORD.NUM=FILE.DATA<3,POS>
        END
    END ELSE
        OUT.ORD.NUM="OUTBOUND ORDER NUMBER NOT FOUND"
    END

    LOCATE "OutboundOrderType" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            OUT.ORD.TYPE=FILE.DATA<3,POS>
        END
    END ELSE
        OUT.ORD.TYPE="OUTBOUND ORDER TYPE NOT FOUND"
    END

    LOCATE "OutboundOrderLine" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            OUT.ORD.LINE=FILE.DATA<3,POS>
        END
    END ELSE
        OUT.ORD.LINE="OUTBOUND ORDER LINE NOT FOUND"
    END
        
    LOCATE "OrderStatus" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            ORD.STAT=FILE.DATA<3,POS>
        END
    END ELSE
        ORD.STAT="STATUS NOT FOUND"
    END

    LOCATE "InboundOrder" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            IN.ORD.NUM=FILE.DATA<3,POS>
        END
    END ELSE
        IN.ORD.NUM="INBOUND ORDER NUMBER NOT FOUND"
    END

    LOCATE "InboundOrderType" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            IN.ORD.TYPE=FILE.DATA<3,POS>
        END
    END ELSE
        IN.ORD.TYPE="INBOUND ORDER TYPE NOT FOUND"
    END

    LOCATE "InboundOrderLine" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            IN.ORD.LINE=FILE.DATA<3,POS>
        END
    END ELSE
        IN.ORD.LINE="INBOUND ORDER LINE NOT FOUND"
    END

    LOCATE "OrderLineComplete" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            ORD.LINE.COMP=FILE.DATA<3,POS>
        END
    END ELSE
        ORD.LINE.COMP="ORDER LINE COMPLETE NOT FOUND"
    END

    LOCATE "Container" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            CONTAINER=FILE.DATA<3,POS>
        END
    END ELSE
        CONTAINER="CONTAINER NOT FOUND"
    END

*~* 01/20/21 - If Location = UPACKTH then additional action is required *~*

    LOCATE "Location" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            LOCATION=FILE.DATA<3,POS>
        END
    END ELSE
        LOCATION="LOCATION NOT FOUND"
    END

    LOCATE "ReceivingLocation" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            RECV.LOC=FILE.DATA<3,POS>
        END
    END ELSE
        RECV.LOC="RECEIVING LOCATION NOT FOUND"
    END

    LOCATE "SerialNumber" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            SER.NUM=FILE.DATA<3,POS>
        END
    END ELSE
        SER.NUM="SERIAL NUMBER NOT FOUND"
    END

    LOCATE "ItemExpirationDate" IN FILE.DATA<1>,START.MARKER SETTING POS THEN
        IF POS > START.MARKER AND POS < END.MARKER THEN
            ITEM.EXP=FILE.DATA<3,POS>
        END
    END ELSE
        ITEM.EXP="ITEM EXPERATION DATE NOT FOUND"
    END


****************************************************************************
* LOCATING OF ALL STATUS CHANGE DATA IS COMPLETE                           *
* THIS IS WHERE WE CAN DO ADDITIONAL TRANSFORMATION AND VERIFICATION       *
* OF UPDATE DATA IF WE CAN'T OR DON'T WANT TO DO IT DURING THE LOOKUP      *
* WE SHOULD TRY AND KEEP ALL TRANSFORMATION HERE SO LOOKUP LOGIC IS UNIQUE *
****************************************************************************

IF FILES(95) = "JEMI" THEN DEBUG
*~* jemi 01/08/21 *~*  

* USER ID VERIFICATION
IF USER.ID = "wms_erp_si_es" OR USER.ID = "system" THEN
    USER.ID = "WSYS"
END ELSE
   IF USER.ID = "" THEN USER.ID="WMS"
END


   IF OUT.ORD.NUM # "" THEN
            TRANS.QTY=INT(TRANS.QTY)
         IF OUT.ORD.TYPE = "SO" THEN
            TS.KEY=OUT.ORD.NUM
            TS.MSG="LINE UPDATED AT DEVICE"
            TS.MSG<2>="UNPICKED:":ITEM.ID:" QTY: ":TRANS.QTY
            CALL WMS.TIMESTAMP.UPDATE(TS.MSG, TS.KEY, "WMS", USER.ID, error)
*~* UPDATE THE ORDER RECORD THIS IS HAPPENING BECAUSE IT WAS ASKED TO HAPPEN *~*
         Q.PICKED = ""
         READ OREC FROM F.ORD,OUT.ORD.NUM ELSE GOTO 999
         IF OREC<2,OUT.ORD.LINE> = ITEM.ID THEN
            Q.PICKED = OREC<34,OUT.ORD.LINE>
            OREC<169,OUT.ORD.LINE> = "DIS"
            OREC<35,OUT.ORD.LINE> = "C"
           
IF FILES(95) = "JEMI" THEN DEBUG
       
            IF Q.PICKED >= 1 THEN
               Q.PICKED = Q.PICKED - TRANS.QTY
            END
               OREC<34,OUT.ORD.LINE> =  Q.PICKED
               OREC<105,OUT.ORD.LINE> =  Q.PICKED
               OREC<266,OUT.ORD.LINE> =  Q.PICKED
            WRITE OREC TO F.ORD,OUT.ORD.NUM
         END   
      END
   END

IF LOCATION = "UPACKTH" THEN 
   GOTO INV.UPDATE
END ELSE
   GOTO 999
END

*****!!!!!!!********  I DON'T THINK I NEED ANYTHING ELSE! - JEMI 01/08/21

INV.UPDATE:

* BRANCH NUMBER VERIFICATION
IF BRANCH = "BRANCH1" OR BRANCH = "WHSE1" THEN
    BRANCH = "1"
END ELSE
    BRANCH = '1'
END

*~* 01/20/21 - SO FAR ALL THESE QTY'S  ARE THE SAME, BUT A GOOD CHECK
QTY.CHG = NEW.QTY - ORIG.QTY   ;* THIS SHOULD BE EQUAL TO 'TRANS.QTY' AND WE SHOULD BE DOING A CHECK HERE.
IF QTY.CHG = "0" THEN
   QTY.CHG = TRANS.QTY
END

TASK = "DISASSOCIATE"

READ PM.REC FROM F.PRODUCT.MASTER, ITEM.ID ELSE PM.REC = ""    ;*   -  Read in the part information from PM
PM.DESC = PM.REC<1>      ;* - DESC-LONG | DESCRIPTION | LONG-DESC | TRANS.DESC | DESC.PETE --- Description of Part from PM
PM.UNIT = PM.REC<2>     ;*  - UNIT | SELL-UNIT -- UOM in PM
PM.FACTOR = PM.REC<4>      ;*  - FACTR | FACTOR | FCTR  -- Factor of part in PM
IF NOT(NUM(PM.FACTOR)) THEN PM.FACTOR = 0    ;* - Check to make sure data read in is a number - this is good
IF PM.FACTOR + 0 = 0 THEN PM.FACTOR = 1      ;* - this seems to be a null check to make sure later on there is no division by 0 - this is good if we need it for math

CATEG = PM.REC<7>    ;* - CATEG (-CODE|-DESC|-NAME|-VEND) CAT (-MC|-DESC) this is in PM
EXT.COST = OCONV((COST/PM.FACTOR) * QTY.CHG,"md02")   ;* - Extended Cost?  (QTY.CHG=log.variance = quantity - loc.count) AVE-COST inv<7> WHY - BC THE ic FILE IS CODED AS TYPE 1 ref wms.sr.cost

*****************************************************************
* WE HAVE THE UPDATE DATA TRANSFORMED THE WAY WE WANT IT        *
* NOW WE DECIDE WHAT IS IMPORTANT/NEEDED FOR UPDATE AND LOAD IT *
* INTO THE DATA.UPDATE ARRAY PER THE LINE NUMBER                *
*****************************************************************

*DATA.UPDATE<1> = TASK
*DATA.UPDATE<2> = REC.DATE
*DATA.UPDATE<3> = ITEM.ID
*DATA.UPDATE<4> = PM.DESC
*DATA.UPDATE<5> = PM.UNIT
*DATA.UPDATE<8> = "WMS RETURN TO VENDOR"
*DATA.UPDATE<9> = QTY.CHG
*DATA.UPDATE<10> = EXT.COST
*DATA.UPDATE<11> = EXT.COST
*DATA.UPDATE<13> = CATEG
*DATA.UPDATE<15> = BRANCH
*DATA.UPDATE<17> = code ON THE 5.15 SCREEN
*DATA.UPDATE<18> = MONTH.NO
*DATA.UPDATE<19> = USER.ID

* IN THE CASE OF TH/UNPACK - WE'RE ADDING THE QTY.CHG TO QOH AND DEPLETING IT FROM QIPS
IF QTY.CHG > 0 THEN             ;* VERIFY CHANGE IS A POSITIVE NUMBER
*    IF INV.REC<1> # 0 THEN      ;* IF IT IS POSITIVE AND THE QOH ISN'T 0
        INV.REC<1> += QTY.CHG   ;* ADD IT TO INVENTORY
*    END
    INV.REC<167> -= QTY.CHG     ;* THEN WE REMOVE IT FROM QIPS
END

*~* 01/20/21 - SHOULD NEVER BE A NEGATIVE!!
*IF QTY.CHG < 0 THEN
*    INV.REC<1> -= QTY.CHG
*    INV.REC<165> += QTY.CHG
*END


**************************************************************************
* THIS IS WHERE WE CALL ALL UPDATE PROGRAMS FOR ANY WORK TO BE COMPLETED *
* WRITE THE DATA TO THE ORDER AND TO THE TIMESTAMP, ETC ETC              *
**************************************************************************

WRITE INV.REC ON F.INVENTORY,ITEM.ID:"*":BRANCH

*~* 01/20/21 -jemi SINCE THE PRODUCT-HISTORY KEY ISN'T WRITTEN UNTIL THE ORDER INVOICES - WE DON'T NEED TO MAKE AN ENTRY HERE!!

*READU PH.KEY FROM F.COMPANY, "PRODHIST-HB" ELSE PH.KEY="99999"    ;*   --   Read in the next PH key to be used
*LOOP     ;*     --- this is a check to make sure there isn't a duplicate key in PH.
*   PH.KEY+=1
*   READ JUNK FROM F.PROD.HISTORY, PH.KEY ELSE EXIT
*REPEAT
*WRITE PH.KEY ON F.COMPANY, "PRODHIST-HB"    ;* -  Write the available record id found back to the counter in the company file
*WRITE DATA.UPDATE ON F.PROD.HISTORY, PH.KEY      ;*  -  Write the record update on PH


*READU PHP.REC FROM F.PROD.HISTORY.PART, ITEM.ID:"*":MMYY ELSE PHP.REC=""      ;*   - read the part history for the current month
*PHP.REC<1,-1> = PH.KEY     ;*  -  update the record with the key
*WRITE PHP.REC ON F.PROD.HISTORY.PART, ITEM.ID:"*":MMYY     ;* - Write update on PHP by month



********************************
* GL UPDATE SPECIFIC VARIABLES *
********************************
*CAT.REC = ''
*INV.ACCT = ''
*ADJ.ACCT = ''
*CODE.REC = ''
*ADJ.COST = ''
*GL.REC = ''

*********************
* GET GL ACCOUNTS   *
*********************
*READ ACCTS.REC FROM F.COMPANY,'AR-ACCOUNTS' ELSE ACCTS.REC = ''

*READ CAT.REC FROM F.PRODUCT.CATEGORY,CATEG ELSE CAT.REC = ''
*INV.ACCT = CAT.REC<4>
*ADJ.ACCT = CAT.REC<30>

*IF ADJ.ACCT = '' THEN ADJ.ACCT = '5420'
*IF INV.ACCT = '' THEN INV.ACCT = '1400'

*********************
* CREDIT INV ACCT   *
*********************
*ADJ.COST = -EXT.COST
*KEY = INV.ACCT:'*':BRANCH:'*':MONTH.NO:'*ADJ*':REC.DATE
*READ GL.REC FROM F.AR.GL,KEY ELSE GL.REC = ''
*IF ADJ.COST > 0 THEN
*    GL.REC<2> = GL.REC<2> + ADJ.COST
*END ELSE
*    GL.REC<1> = GL.REC<1> - ADJ.COST
*END

*WRITE GL.REC ON F.AR.GL,KEY

*********************
* DEBIT EXP. ACCT   *
*********************
*KEY = ADJ.ACCT:'*':BRANCH:'*':MONTH.NO:'*ADJ*':REC.DATE
*READ GL.REC FROM F.AR.GL,KEY ELSE GL.REC = ''

*IF ADJ.COST > 0 THEN
*    GL.REC<1> = GL.REC<1> + ADJ.COST
*END ELSE
*    GL.REC<2> = GL.REC<2> - ADJ.COST
*END

*WRITE GL.REC ON F.AR.GL,KEY

999

RELEASE
RETURN